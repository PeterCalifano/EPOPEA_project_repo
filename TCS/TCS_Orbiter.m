%% Set Latex font
set(groot,'defaulttextinterpreter','latex')
set(groot,'defaultLegendInterpreter','latex')
set(groot,'defaultAxesTickLabelInterpreter','latex')
%%
clearvars; clc; close all

% Solar Flux
AU_earth = 1; 
AU_enc = 9.5;
q_sun_enc = 1367.5/AU_enc^2;
q_sun_earth = 1367.5;

% Albedo 
a_earth = 0.35;
a_enc = 0.8;
a_sat = 0.499;

% View Factors 
R_earth = 6371;
R_orbit_earth = 670 + R_earth;
R_enc = 252.1;
R_orbit_enc_min = 20 + R_enc;
R_orbit_enc_max = 1.05e+03 + R_enc;
R_sat = 58232;
R_orbit_sat = 238000;
F_earth = (R_earth/R_orbit_earth)^2;
F_enc_max = (R_enc/R_orbit_enc_min)^2;
F_enc_min = (R_enc/R_orbit_enc_max)^2;
F_sat = (R_sat/R_orbit_sat)^2;

% Radiative parameters
sigma_SB = 5.67e-8;
epsilon_Earth = 0.85;
epsilon_Enc = 1;
epsilon_sat = 1;
T_earth = 255.25;
T_Enc = 72;
T_Sat = 97;

% External fluxes 
q_Sun = q_sun_earth;
q_alb = q_Sun * F_earth * a_earth;
q_Earth = F_earth * sigma_SB * T_earth^4 * epsilon_Earth;

%%% Spacecraft %%%

% Area
L1 = 3.6;
L2 = 3.6;
L3 = 2.5;
A1 = L1*L2;
A6 = A1;
A2 = L1*L3;
A4 = A2;
A3 = L2*L3;
A5_tot = A3;
D_ant = 3.72; % diameter of antenna [m]
A_ant = pi*(D_ant/2)^2; 
A1_ext = A1 - A_ant; % external area of surface 1 not covered by the antenna

%%% Structure properties (Al-5056-O)
k_str = 117;
l_str = 0.02;

% Structure
epsilon_int = 0.23; %%%%%%%%%%????????????????' aluminum ???????? -> to change, sentitivity analysis
% epsilon_int = 0.874; % black paint to maximize exchange (you can change it)
epsilon_int = 0.034; 

epsilon_MLI = 0.03;
epsilon_MLI = 0.02; %%%%%%%%%%%%%%%%%%%%%%
% alpha_MLI = 0.08 (Kapton, silvered, aluminum oxide coated, 1 mil)
%           = 0.11 Kapton, aluminized, silicon oxide coated, 1 mil
%           = 0.12 typical
alpha_MLI = 0.11; 

% Antenna painted white: Vita-var PV-100 white paint
alpha_ant = 0.22; % from 0.17 to 0.27
epsilon_ant = 0.82; % do sensitivity analysis up to 0.9

% Thermal straps
k_TS = 398; 
L_TS = 120e-3; %?????

% Radiators
% changed from 0.8: if louvers open ~0.7
eps_louv_closed = 0.14;
eps_louv_open = 0.7;
eps_rad = eps_louv_open; % if open louvers

% eps_rad = 0.8;  % if ideal radiators and not louvers
alpha_louv_closed = 0.062; 
alpha_louv_open = 0.269; % (worst case EOL)
A_rad_one = 1 * 0.2; % area one radiator.
% SENER LOUVER: 0.2128 m^2. consider also the structure... ok 0.2m^2
n_rad = 20; %% can be changed
A_rad_tot = A_rad_one*n_rad;% total area of radiators
A5 = A5_tot-A_rad_tot+eps; % area on surface 5 not covered by radiators

% RHU or heaters
n_RHU = 0; % you can change this!
P_RHU = 1; % 1 W is the thermal power generated by each RHU 

%% PAYLOADS
% Q required by heaters/ RHU in the cold case
% NAC
A_NAC = 612863e-6;
eps_NAC = 0.031; % aluminum (ASMAD)
T_NAC= - 70 + 15 + 273.15;
Q_NAC_req = A_NAC*sigma_SB*T_NAC^4*eps_NAC;

% WAC
A_WAC = 983474e-6;
eps_WAC = 0.031; % aluminum (ASMAD)
T_WAC= - 30 + 15 + 273.15;
Q_WAC_req = A_WAC*sigma_SB*T_WAC^4*eps_WAC;

% TES
eps_TES = 0.031; % aluminum (ASMAD)
l1 = 130e-3; l2 = 180e-3; l3 = 180e-3;
A_TES = l1*l2 + 2*l2*l3 + 2*l1*l3;
T_TES = 10 + 15 + 273.15;
Q_TES_req = A_TES*sigma_SB*T_TES^4*eps_TES; % heat needed to warm up TES

% Laser altimeter
l1 = 600e-3;
l2 =  400e-3; l3 = 250e-3;
A_LA = l2*l3 + 2*l1*l3 + 2*l1*l2;
eps_LA = 0.031; % aluminum (ASMAD)
T_LA = - 20 + 15 + 273.15;
Q_LA_req = A_LA*sigma_SB*T_LA^4*eps_LA;

% Radar sounder
A_RS = 20341*2*(10^(-6))+21834e-6;
eps_RS = 0.031; % aluminum (ASMAD)

T_RS = - 40 + 15 + 273.15;
Q_RS_req = A_RS*sigma_SB*T_RS^4*eps_RS;

% sum
Q_pl_tot = Q_NAC_req + Q_WAC_req + Q_TES_req + Q_RS_req + Q_LA_req;
fprintf("Total power required by PL in the cold case [W]: %f ",Q_pl_tot)

% Compute area radiators for pl
alpha_al = 0.16; % book
% NAC
A_NAC_hot = pi*(390e-3/2)^2 -pi*(140e-3/2)^2 ;
Q_NAC = 7; % power budget
Q_hot_NAC = q_Earth * eps_NAC*A_NAC_hot + q_alb*A_NAC_hot*alpha_al + Q_NAC;
T_NAC_hot = 40 - 15 + 273.15;
Q_e_NAC =  A_NAC*sigma_SB*T_NAC_hot^4*eps_NAC;
Q_rad_NAC = Q_hot_NAC - Q_e_NAC;
A_rad_NAC  = Q_rad_NAC/(sigma_SB*T_NAC_hot^4*eps_rad);

% WAC
A_WAC_hot = pi*(760e-3/2)^2 -pi*( 600e-3/2)^2 ;
Q_WAC = 4;
Q_hot_WAC = q_Earth * eps_WAC*A_WAC_hot + q_alb*A_WAC_hot*alpha_al + Q_WAC;
T_WAC_hot = 40 - 15 + 273.15;
Q_e_WAC =  A_WAC*sigma_SB*T_WAC_hot^4*eps_WAC;
Q_rad_WAC = Q_hot_WAC - Q_e_WAC;
A_rad_WAC  = Q_rad_WAC/(sigma_SB*T_WAC_hot^4*eps_rad);

% TES
A_TES_hot = 23400E-6;
Q_TES = 18;
Q_hot_TES = q_Earth * eps_TES*A_TES_hot + q_alb*A_TES_hot*alpha_al + Q_TES;
T_TES_hot = 40 - 15 + 273.15;
Q_e_TES =  A_TES*sigma_SB*T_TES_hot^4*eps_TES;
Q_rad_TES = Q_hot_TES - Q_e_TES;
A_rad_TES  = Q_rad_TES/(sigma_SB*T_TES_hot^4*eps_rad);

% LASER ALTIMETER
A_LA_hot = 600e-3*250e-3;
Q_LA = 52;
Q_hot_LA = q_Earth * eps_TES*A_LA_hot + q_alb*A_LA_hot*alpha_al + Q_LA;
T_LA_hot = 65 - 15 + 273.15;
Q_e_LA =  A_TES*sigma_SB*T_LA_hot^4*eps_LA;
Q_rad_LA = Q_hot_LA - Q_e_LA;
A_rad_LA  = Q_rad_LA/(sigma_SB*T_LA_hot^4*eps_rad);

A_rad_pl_tot = A_rad_NAC + A_rad_WAC + A_rad_TES + A_rad_LA; % AREA ON NODE 6 
fprintf("Total area radiator required by PL in the hot case [m^2]: %f ",A_rad_pl_tot)
Q_pl_budget = Q_NAC + Q_WAC + Q_TES + Q_LA;
%%
% Power
P_budget_hot = 322.65;
P_input_TMTC_h = 28.79; % ask Antoine
P_diss_TMTC_h = 22.35;  % ask Antoine
% add batteries ...
We = 397;              % electrical power from RTG
Wt = 2647;             % thermal power from RTG
Q_RHU_added = 50;
Q_RTG_waste = 60;
Q_hot = P_budget_hot - P_input_TMTC_h+P_diss_TMTC_h - Q_pl_budget + Q_RHU_added + Q_RTG_waste; 
Q_hot = P_budget_hot - P_input_TMTC_h+P_diss_TMTC_h - Q_pl_budget; 
Q_shunt = We - Q_hot; % check if a shunt can dissipate this power

% view factor
% % Surface 1
% F12 = VF_PerpRec(L3,L2,L1);
% F21 = F12*A1/A2;
% F13 = VF_PerpRec(L3,L1,L3);
% F31 = F13*A1/A3;
% F14 = VF_PerpRec(L3,L2,L1);
% F41 = VF_PerpRec(L2,L3,L1);
% F15_tot = F13;
% F51_tot = F15_tot*A5_tot/A1;
% F1rad = F15_tot*A_rad_tot/A5_tot;
% Frad1 = F1rad*A1/A_rad_tot; 
% F15 = F15_tot*A5/A5_tot;
% F51 = F15*A1/A5;
% F16 = VF_ParallelEqualRec(L3,L1,L2);
% F61 = F16;

F12 = 1;
F21 = F12*A1/A2;
F13 = 0;
F31 = 0;
F14 = 0;
F41 = 0;
F15_tot = 0;
F51_tot = 0;
F1rad = 0;
Frad1 = 0; 
F15 = 0;
F51 = 0;
F16 = 0;
F61 = 0;

% Surface 2 
% F23 = VF_PerpRec(L2,L3,L1);
% F32 = F23*A2/A3;
% F24 = VF_ParallelEqualRec(L2,L1,L3);
% F42 = F24*A2/A4;
% F25_tot = VF_PerpRec(L2,L3,L1);
% F52_tot = F25_tot*A5_tot/A2;
% F2rad = F25_tot*A_rad_tot/A5_tot;
% Frad2 = F2rad*A2/A_rad_tot; 
% F25 = F25_tot*A5/A5_tot;
% F52 = F25*A2/A5;
% F26 = VF_PerpRec(L2,L3,L1);
% F62 = F26*A2/A6;
F32 = 1;
F23 = F32*A3/A2;
F42 = 1;
F24 = F42*A4/A2;
F62 = 1;
F26 = F62*A6/A2;
F52 = 1;
Frad2 = 1;
F25 = F52*A5/A2;
F2rad = Frad2*A_rad_tot/A2;

% Surface 3
% F34 = F32;
% F43 = F23;
% F35_tot = VF_ParallelEqualRec(L1,L2,L3);
% F53_tot = F35_tot*A5_tot/A3;
% F3rad = F35_tot*A_rad_tot/A5_tot;
% Frad3 = F3rad*A3/A_rad_tot; 
% F35 = F35_tot*A5/A5_tot;
% F53 = F35*A3/A5;
% F36 = F31;
% F63 = F13;
F34 = 0;
F43 = 0;
F35_tot = 0;
F53_tot = 0;
F3rad = 0;
Frad3 = 0; 
F35 = 0;
F53 = 0;
F36 = 0;
F63 = 0;

% Surface 4
% F45_tot = F43;
% F54_tot = F45_tot*A5_tot/A4;
% F4rad = F45_tot*A_rad_tot/A5_tot;
% Frad4 = F4rad*A4/A_rad_tot; 
% F45 = F45_tot*A5/A5_tot;
% F54 = F45*A4/A5;
% F46 = F41; 
% F64 = F14;

F45_tot = 0;
F54_tot = 0;
F4rad = 0;
Frad4 = 0; 
F45 = 0;
F54 = 0;
F46 = 0; 
F64 = 0;

% Surface 6
% F65_tot = F63;
% F56_tot = F65_tot*A5_tot/A6;
% F6rad = F65_tot*A_rad_tot/A5_tot;
% Frad6 = F6rad*A6/A_rad_tot; 
% F65 = F65_tot*A5/A5_tot;
% F56 = F65*A6/A5;

F65_tot = 0;
F56_tot = 0;
F6rad = 0;
Frad6 = 0; 
F65 = 0;
F56 = 0;

% radiative coupling
R.R_12 = sigma_SB * A1 * epsilon_int^2 * F12;
R.R_1rad = sigma_SB * A1 * epsilon_int * eps_louv_open * F1rad;
R.R_13 = sigma_SB * A1 * epsilon_int^2 * F13;
R.R_14 = sigma_SB * A1 * epsilon_int^2 * F14;
R.R_15 = sigma_SB * A1 * epsilon_int^2 * F15;
R.R_16 = sigma_SB * A1 * epsilon_int^2 * F16;
R.R_23 = sigma_SB * A2 * epsilon_int^2 * F23;
R.R_24 = sigma_SB * A2 * epsilon_int^2 * F24;
R.R_25 = sigma_SB * A2 * epsilon_int^2 * F25;
R.R_26 = sigma_SB * A2 * epsilon_int^2 * F26;
R.R_rad3 = sigma_SB * A_rad_tot * epsilon_int * eps_louv_open * Frad3; % ?
R.R_rad4 = sigma_SB * A_rad_tot * epsilon_int * eps_louv_open * Frad4; % ?
R.R_rad2 = sigma_SB * A_rad_tot * epsilon_int * eps_louv_open * Frad2; % ?
R.R_rad6 = sigma_SB * A_rad_tot * epsilon_int * eps_louv_open * Frad6; % ?
R.R_rad5 = 0;
R.R_34 = sigma_SB * A3 * epsilon_int^2 * F34;
R.R_35 = sigma_SB * A3 * epsilon_int^2 * F35;
R.R_36 = sigma_SB * A3 * epsilon_int^2 * F36;
R.R_45 = sigma_SB * A4 * epsilon_int^2 * F45;
R.R_46 = sigma_SB * A4 * epsilon_int^2 * F46;
R.R_56 = sigma_SB * A5 * epsilon_int^2 * F56;


R.R_1ant = sigma_SB * (A1-A1_ext) * epsilon_MLI; % ????? not sure about this. also conduction. and not only MLI
C_1ant_max = k_str * l_str/(A1-A1_ext);
C.C_1ant = C_1ant_max/10;  % hyp: diameter of contact antenna - structure is 1/10 of D antenna 

% C.C_1ant = 0;
R.R_10 = sigma_SB * A1_ext * epsilon_MLI;
R.R_20 = sigma_SB * A2 * epsilon_MLI;
R.R_30 = sigma_SB * A3 * epsilon_MLI;
R.R_40 = sigma_SB * A4 * epsilon_MLI;
R.R_50 = sigma_SB * A5 * epsilon_MLI;
R.R_60 = sigma_SB * (A6 - A_rad_pl_tot) * epsilon_MLI;
% R.R_60 = sigma_SB * (A6) * epsilon_MLI;
R.R_ant0 = sigma_SB * A_ant * epsilon_ant;
R.R_rad0 = sigma_SB * A_rad_tot * eps_rad;

% Add MLI on surface 3, 2, 6 
R.R_6int6ext = sigma_SB * A6 * epsilon_MLI;
R.R_3int3ext = sigma_SB * A3 * epsilon_MLI;
R.R_2int2ext = sigma_SB * A2 * epsilon_MLI;
R.R_1int1ext = sigma_SB * A1 * epsilon_MLI;
R.R_4int4ext = sigma_SB * A4 * epsilon_MLI;
R.R_5int5ext = sigma_SB * A5 * epsilon_MLI;

% Conductive Coupling
C.C_12 = k_str*l_str*L1*(1/(L2/2)+1/(L3/2));
C.C_13 = k_str*l_str*L2*(1/(L1/2)+1/(L3/2));
C.C_14 = k_str*l_str*L1*(1/(L2/2)+1/(L3/2));
C.C_15 = k_str*l_str*L2*(1/(L1/2)+1/(L3/2));
C.C_16 = 0;
C.C_23 = k_str*l_str*L3*(1/(L1/2)+1/(L2/2));
C.C_25 = k_str*l_str*L3*(1/(L1/2)+1/(L2/2));
C.C_24 = 0;
C.C_26 = C.C_12;
C.C_34 = C.C_23;
C.C_35 = 0;
C.C_36 = C.C_13;
C.C_45 = C.C_34;
C.C_46 = C.C_14;
C.C_56 = C.C_13;

C.C_5rad = k_str*(l_str*L3/(L2/2));

% to tune:
% heat pipes from Celsia heat pipes calculator
R_HP_min = 0.04;
R_HP_max = 0.76;
C_HP_max = 1/R_HP_min;
C_HP_min = 1/R_HP_max;
C_TS = 5; % conductive coupling thermal straps from HiPeR Flexlinks AIRBUS
C.C_1rad = C_TS*2;
C.C_2rad = C_TS*2;
C.C_3rad = C_TS*2 + C_HP_max*2;    % to radiators on surface 6
C.C_4rad = C_TS*2;
C.C_6rad = C_TS*2 + C_HP_max*2;
C.C_5rad = C.C_5rad + C_HP_max*2; % HYP: HP both for electronics TMTC, batteries and OBDH

% Angles with external fluxes
theta_6Sun = 24.7 * pi/180;
theta_3Sun = 90 - theta_6Sun;

Q_ext_hot = zeros(8,1);
% HOT CASE 1 : cameras towards Earth, face 5 sees the Sun
% HOT CASE 2: cameras towards Earth, antenna towards Sun
% HOT CASE 3: HGA (1) towards Earth, RTGs (6) towards Sun
% HOT CASE 4: FIRST FLYBY, PL towards Earth
% HOT CASE 5: FIRST FLYBY, HGA towards Earth
hot_case = 4;

switch hot_case
    case 1
        theta_5Sun = deg2rad(20);
        theta_6Sun = pi/2 - theta_5Sun;
        Q_ext_hot(3) = q_Earth * epsilon_MLI*A3 + q_alb*A3*alpha_MLI ;
        Q_ext_hot(5) = q_Sun * A5 * alpha_MLI* cos(theta_5Sun); 
        Q_ext_hot(6) = q_Sun * A6 * alpha_MLI* cos(theta_6Sun);
    case 2
        theta_antSun = 0;
        Q_ext_hot(7) = q_Sun * A_ant * alpha_ant* cos(theta_antSun);
        Q_ext_hot(1) = q_Sun * A1_ext * alpha_MLI* cos(theta_antSun);
        Q_ext_hot(3) = q_Earth*epsilon_MLI*A3 + q_alb*A3*alpha_MLI ;
      
    case 3
        Q_ext_hot(6) = q_Sun * A6 * alpha_MLI* cos(theta_6Sun);
        Q_ext_hot(3) = q_Sun * A3 * alpha_MLI* cos(theta_3Sun);
        Q_ext_hot(1) = q_Earth * epsilon_MLI * A1_ext + q_alb * A1_ext * alpha_MLI ;
        Q_ext_hot(7) = q_Earth * epsilon_ant * A_ant + q_alb * A_ant * alpha_ant ;
    case 4
        % first fly by: point cameras towards Earth
        theta_S1 = deg2rad(65.63);
        theta_S2 = deg2rad(70);
        theta_S3 = deg2rad(25);
        Q_ext_hot(1) = q_Sun * A1_ext * alpha_MLI* cos(theta_S1);
        Q_ext_hot(2) = q_Sun * A2 * alpha_MLI* cos(theta_S2);
        Q_ext_hot(3) = q_Earth * epsilon_MLI * A3 + q_alb * A3 * alpha_MLI + q_Sun * A3 * alpha_MLI* cos(theta_S3);
        Q_ext_hot(7) = q_Sun * A_ant * alpha_ant* cos(theta_S1);
       case 5
        % first fly by: point HGA towards Earth
        theta_S5 = deg2rad(65.63);
        theta_S2 = deg2rad(70);
        theta_S1 = deg2rad(25);
        Q_ext_hot(1) = q_Sun * A1_ext * alpha_MLI* cos(theta_S1) + q_Earth * epsilon_MLI * A1_ext + q_alb * A1_ext * alpha_MLI;
        Q_ext_hot(2) = q_Sun * A2 * alpha_MLI* cos(theta_S2);
        Q_ext_hot(7) = q_Sun * A_ant * alpha_ant* cos(theta_S1) + q_Earth * epsilon_ant * A_ant + q_alb * A_ant * alpha_ant;
        Q_ext_hot(5) = q_Sun * A5 * alpha_MLI* cos(theta_S5);
end

% Initial condition
T0 = 293;

% solve
%%% Internal dissipation power
Q_diss_hot = zeros(8,1);
Q_diss_hot(5) =  Q_hot;

%%% SOLVE THE SYSTEM 
Clamped = 0;
T_guess = 273*ones(14,1);
options = optimoptions('fsolve','display','iter','MaxFunctionEvaluations',50000,'Maxiterations',50000);
T_orb_hot = fsolve(@(T) HeatBalance_Orbiter(T, R, C, Q_ext_hot , Q_diss_hot, Clamped), T_guess, options);

fprintf(['1 ',num2str(T_orb_hot(1)-273),' Celsius\n'])
fprintf(['2 ',num2str(T_orb_hot(2)-273),' Celsius\n'])
fprintf(['3 ',num2str(T_orb_hot(3)-273),' Celsius\n'])
fprintf(['4 ',num2str(T_orb_hot(4)-273),' Celsius\n'])
fprintf(['5 ',num2str(T_orb_hot(5)-273),' Celsius\n'])
fprintf(['6 ',num2str(T_orb_hot(6)-273),' Celsius\n'])
fprintf(['ant ',num2str(T_orb_hot(7)-273),' Celsius\n'])
fprintf(['rad ',num2str(T_orb_hot(8)-273),' Celsius\n'])

% add mass and specific heat for transient


%% Cold case
% Power
P_budget_cold = 290;
P_input_TMTC_cold = 0;
P_diss_TMTC_cold = 0;
% add batteries ...
We = 339;
Wt = 2260;
Q_cold = P_budget_cold-P_input_TMTC_cold+P_diss_TMTC_cold;

% close louvers and compute again thermal couplings
eps_rad = eps_louv_closed;

% radiative coupling

R.R_rad0 = sigma_SB*A_rad_tot * eps_rad;
C.C_6rad = 0; % VCHP and VCTS
C.C_5rad = 0; % VCHP and VCTS

% External fluxes
% IR Heat fluxes for Saturn and Enceladus
q_Sat = F_sat*sigma_SB*T_Sat^4*epsilon_sat;
q_Enc = F_enc_min * sigma_SB * T_Enc^4 *epsilon_Enc;

% HYP: nadir pointing with cameras
% face 3 with cameras points Enceladus and receive IR from Enceladus
% Saturn ? HYP: face 4 (CHANGE!)
P_added_6 = 60; % from RTG (look Cassini Reference)
P_VRHU_6 = 50; % for batteries
P_VRHU_3 = 0; % for internal PL

Q_diss_cold = zeros(8,1);
Q_diss_cold(6) = P_added_6 + We/2 + P_VRHU_6;
Q_diss_cold(3) = P_VRHU_3;
Q_diss_cold(5) = We/2;
% Q_diss_cold(7) = 40;

% Extternal fluxes
theta_3Enc = 0;
theta_6Sat = 0; % CHANGE!
Q_ext_cold = zeros(11,1);
Q_ext_cold(3) = q_Enc * A3 * epsilon_MLI*cos(theta_3Enc) + P_VRHU_3;
Q_ext_cold(6) = q_Sat * A6 * epsilon_MLI*cos(theta_6Sat) + P_VRHU_6;

%%% SOLVE THE SYSTEM 
Clamped = 1;
if Clamped == 0
    P_added_6 = 60; % from RTG (look Cassini Reference)
P_VRHU_6 = 50; % for batteries
P_VRHU_3 = 0; % for internal PL

Q_diss_cold = zeros(8,1);
Q_diss_cold(6) = P_added_6 + We/2 + P_VRHU_6;
Q_diss_cold(3) = P_VRHU_3;
Q_diss_cold(5) = We/2;
else 
    if Clamped == 1
        P_added_6 = 60; % from RTG (look Cassini Reference)
        P_VRHU_6 = 20; % for batteries
        P_VRHU_3 = 0; % for internal PL
        
        Q_diss_cold = zeros(8,1);
        Q_diss_cold(6) = P_added_6 + We/2 + P_VRHU_6;
        Q_diss_cold(3) = P_VRHU_3;
        Q_diss_cold(5) = We/2;
    end
end

T_guess = 273*ones(14,1);
options = optimoptions('fsolve','display','iter','MaxFunctionEvaluations',50000,'Maxiterations',50000);
T_orb_cold = fsolve(@(T) HeatBalance_Orbiter(T, R, C, Q_ext_cold , Q_diss_cold, Clamped), T_guess, options);

fprintf(['1 ',num2str(T_orb_cold(1)-273),' Celsius\n'])
fprintf(['2 ',num2str(T_orb_cold(2)-273),' Celsius\n'])
fprintf(['3 ',num2str(T_orb_cold(3)-273),' Celsius\n'])
fprintf(['4 ',num2str(T_orb_cold(4)-273),' Celsius\n'])
fprintf(['5 ',num2str(T_orb_cold(5)-273),' Celsius\n'])
fprintf(['6 ',num2str(T_orb_cold(6)-273),' Celsius\n'])
fprintf(['ant ',num2str(T_orb_cold(7)-273),' Celsius\n'])
fprintf(['rad ',num2str(T_orb_cold(8)-273),' Celsius\n'])

% Conduction between surfaces
% To do:
% 2) change internal power
% 3) surface in contact with lander
% 4) External p/l ?
% sensitivity analysis, check properties
% T of RTG
