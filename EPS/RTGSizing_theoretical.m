function [ M_isotope, P_totalThermal, P_dissipatedThermal ] = RTGSizing_theoretical( P_electric_required_watt, t_years, conversion_efficiency, fuel_data )

%% PROTOTYPE
% [ M_isotope, P_totalThermal, P_dissipatedThermal ] = RTGSizing_theoretical( P_electric_required_watt, t_years, conversion_efficiency, fuel_data )
% -------------------------------------------------------------------------------------------------------------
%% DESCRIPTION
% Function computes hypothetical electric power generated by a nuclear fuel
% at time t[years].
%   --> Function is used to compare the best alternatives that can be used as
%       nuclear fuel. From this function, you can decide whether to use a
%       Plutonium-based or Americium-based RTG.
% NOTE: Function has been validated with Space Propulsion notes
% -------------------------------------------------------------------------------------------------------------
%% INPUT
% P_electric_required_watt [1x1] Amount of power that is required by the loads at EoL
% t_years [1x1] Years after start of mission, at which power P_electric_required_watt is requested (e.g. EoL)
% conversion_efficiency [1x1] Percentage representing efficiency of energy conversion (~6% for Seebeck effect, ~26% for Stirling cycle)
% fuel_data [struct] Structure containing information on fuel data. This structure is obtained by loading a variable from RTG_data folder
% -------------------------------------------------------------------------------------------------------------
%% OUTPUT
% M_isotope [1x1] Mass of isotope that is required to obtain P_electric_required_watt
% P_totalThermal [1x1] Total thermal power that is generated by a mass M_isotope of nuclear fuel
% P_dissipatedThermal [1x1] Power that is dissipated from the RTG such that P_totalThermal = P_electric_required_watt + P_dissipatedThermal
% -------------------------------------------------------------------------------------------------------------
%% CHANGELOG
% 13/11/2022 Matteo D'Ambrosio, Created and validated function
% -------------------------------------------------------------------------------------------------------------
%% DEPENDENCIES
% -None
% -------------------------------------------------------------------------------------------------------------

% Unpack struct
t_halflife = fuel_data.halflife ; % [years]
specificPower = fuel_data.specificPower ; % [W\kg]

% Compute specific power [W/kg] that isotope can generate at time t
P_specific = @(t_years) specificPower * 2^(-t_years/t_halflife) ; % [W/kg]

% Compute fuel mass required to obtain that electric power
M_isotope = P_electric_required_watt / ( P_specific(t_years) * conversion_efficiency ) ; % [kg]

% Compute overall thermal power that is generated, P_thermal_tot = P_electric + P_dissipated_thermal
P_totalThermal = P_specific(t_years) * M_isotope ;

% Compute the thermal power dissipated to obtain that electric power (useful for TCS evaluation)
P_dissipatedThermal = P_totalThermal * ( 1 - conversion_efficiency ) ;

end