%% Set Latex font
set(groot,'defaulttextinterpreter','latex')
set(groot,'defaultLegendInterpreter','latex')
set(groot,'defaultAxesTickLabelInterpreter','latex')
%%
clearvars; clc; close all

% Solar Flux
AU_earth = 1; 
AU_enc = 9.5;
q_sun_enc = 1367.5/AU_enc^2;
q_sun_earth = 1367.5;

% Albedo 
a_earth = 0.35;
a_enc = 0.8;
a_sat = 0.499;

% View Factors 
R_earth = 6371;
R_orbit_earth = 670 + R_earth;
R_enc = 252.1;
R_orbit_enc_min = 20 + R_enc;
R_orbit_enc_max = 20 + R_enc;
R_sat = 58232;
R_orbit_sat = 238000;
F_earth = (R_earth/R_orbit_earth)^2;
F_enc_max = (R_enc/R_orbit_enc_min)^2;
F_enc_min = (R_enc/R_orbit_enc_max)^2;
F_sat = (R_sat/R_orbit_sat)^2;

% Radiative parameters
sigma_SB = 5.67e-8;
epsilon_Earth = 0.85;
epsilon_Enc = 1;
epsilon_sat = 1;
T_earth = 255.25;
T_Enc = 72;
T_Sat = 97;

%%% Spacecraft %%%

% Area
L1 = 4;
L2 = 4;
L3 = 2;
A1 = L1*L2;
A6 = A1;
A2_tot = L1*L3;
A4 = A2_tot;
A3 = L2*L3;
A5 = A3;
D_ant = 3.2; % diameter of antenna ??
A_ant = pi*(D_ant/2)^2; 
A1_ext = A1-A_ant; % external area of surface 1 not covered by the antenna
%%% Structure properties (Al-5056-O)
k_str = 117;
l_str = 0.02;

% Structure
epsilon_int = 0.23; %%%%%%%%%%????????????????' aluminum ???????? -> to change, sentitivity analysis
epsilon_1 = 0.9; %%%%??????????? epsilon of internal node

% MLI 
epsilon_MLI = 0.03;
alpha_MLI = 0.14; % max. typ = 0.12 
% alpha_MLI = 0.1;
% Antenna painted white
epsilon_ant = 0.90;
alpha_ant = 0.18; % do sensitivity analysis

% Thermal stripes
k_TS = 398; 
L_TS = 120e-3; %?????

% Radiators
% changed from 0.8: if louvers open ~0.7
eps_louv_closed = 0.14;
eps_louv_open = 0.7;
eps_rad = eps_louv_open; % if open louvers
eps_rad = eps_louv_open;
% eps_rad = 0.8;  % if ideal radiators and not louvers
alpha_louv_closed = 0.062; 
alpha_louv_open = 0.269; % (worst case EOL)
A_rad_one = 1 * 0.2; % area one radiator
n_rad = 30; %% to change
A_rad_tot = A_rad_one*n_rad;% total area of radiators
A2 = A2_tot-A_rad_tot+eps; % area on surface 2 not covered by radiators
k_rad = 1;

% RHU or heaters
n_RHU = 50; 
P_RHU = 1; % 1 W is the thermal power generated by each RHU 

% Power
P_budget_hot = 349;
P_input_TMTC_h = 20;
P_diss_TMTC_h = 16.44;
% add batteries ...
We = 676;
Wt = 4506;
Q_hot = P_budget_hot-P_input_TMTC_h+P_diss_TMTC_h;

% view factor
% Surface 1
F12_tot = VF_PerpRec(L3,L2,L1);
F12 = F12_tot*A2/A2_tot;
F21 = F12*A1/A2;
F1rad = F12_tot*A_rad_tot/A2_tot;
Frad1 = F1rad*A1/A_rad_tot; 
F13 = VF_PerpRec(L3,L1,L3);
F31 = F13*A1/A3;
F14 = VF_PerpRec(L3,L2,L1);;
F41 = VF_PerpRec(L2,L3,L1);
F15 = F13;
F51 = F31;
F16 = VF_ParallelEqualRec(L3,L1,L2);
F61 = F16;

% Surface 2 and radiator
F23_tot = VF_PerpRec(L2,L3,L1);
F32_tot = F23_tot*A2_tot/A3;
F32 = F32_tot*A2/A2_tot;
F23 = F32*A3/A2;
F3rad = F32_tot*A_rad_tot/A2_tot;
Frad3 = F3rad*A3/A_rad_tot; 
F24_tot = VF_ParallelEqualRec(L2,L1,L3);
F42_tot = F24_tot*A2_tot/A4;
F42 = F42_tot*A2/A2_tot;
F24 = F42*A4/A2;
F4rad = F42_tot*A_rad_tot/A2_tot;
Frad4 = F4rad*A4/A_rad_tot; 
F25_tot = VF_PerpRec(L2,L3,L1);
F52_tot = F25_tot*A2_tot/A5;
F52 = F52_tot*A2/A2_tot;
F25 = F52*A5/A2;
F5rad = F52_tot*A_rad_tot/A2_tot;
Frad5 = F5rad*A5/A_rad_tot; 
F26_tot = VF_PerpRec(L2,L3,L1);
F62_tot = F26_tot*A2_tot/A6;
F62 = F62_tot*A2/A2_tot;
F26 = F62*A6/A2;
F6rad = F62_tot*A_rad_tot/A2_tot;
Frad6 = F6rad*A6/A_rad_tot; 
% Surface 3
F34 = F32;
F43 = F23;
F35 = VF_ParallelEqualRec(L1,L2,L3);
F53 = F35;
F36 = F31;
F63 = F13;

% Surface 4
F45 = F43;
F54 = F34;
F46 = F41; 
F64 = F14;

% Surface 5
F56 = F36; 
F65 = F63;

% radiative coupling
R.R_12 = sigma_SB*A1 * epsilon_int^2*F12;
R.R_1rad = sigma_SB*A1 * epsilon_int^2*F1rad;
R.R_13 = sigma_SB*A1 * epsilon_int^2*F13;
R.R_14 = sigma_SB*A1 * epsilon_int^2*F14;
R.R_15 = sigma_SB*A1 * epsilon_int^2*F15;
R.R_16 = sigma_SB*A1 * epsilon_int^2*F16;
R.R_23 = sigma_SB*A2 * epsilon_int^2*F23;
R.R_24 = sigma_SB*A2 * epsilon_int^2*F24;
R.R_25 = sigma_SB*A2 * epsilon_int^2*F25;
R.R_26 = sigma_SB*A2 * epsilon_int^2*F26;
R.R_rad3 = sigma_SB*A_rad_tot * epsilon_int*eps_louv_open*Frad3; %??
R.R_rad4 = sigma_SB*A_rad_tot * epsilon_int*eps_louv_open*Frad4; %??
R.R_rad5 = sigma_SB*A_rad_tot * epsilon_int*eps_louv_open*Frad5; %??
R.R_rad6 = sigma_SB*A_rad_tot * epsilon_int*eps_louv_open*Frad6; %??
R.R_34 = sigma_SB*A3 * epsilon_int^2*F34;
R.R_35 = sigma_SB*A3 * epsilon_int^2*F35;
R.R_36 = sigma_SB*A3 * epsilon_int^2*F36;
R.R_3int3ext = sigma_SB * A3 * epsilon_MLI;

R.R_45 = sigma_SB*A4 * epsilon_int^2*F45;
R.R_46 = sigma_SB*A4 * epsilon_int^2*F46;
R.R_56 = sigma_SB*A5 * epsilon_int^2*F56;
R.R_5int5ext = sigma_SB * A5 * epsilon_MLI;

R.R_1ant = sigma_SB*A1_ext * epsilon_MLI; % ????? not sure about this. also conduction. and not only MLI
C.C_1ant = k_str*l_str/(A1-A1_ext);
% C.C_1ant = 0;
R.R_10 = sigma_SB*A1_ext * epsilon_MLI;
R.R_20 = sigma_SB*A2 * epsilon_MLI;
R.R_30 = sigma_SB*A3 * epsilon_MLI;
R.R_40 = sigma_SB*A4 * epsilon_MLI;
R.R_50 = sigma_SB*A5 * epsilon_MLI;
R.R_60 = sigma_SB*A6 * epsilon_MLI;
R.R_ant0 = sigma_SB*A_ant * epsilon_ant;
R.R_rad0 = sigma_SB*A_rad_tot * eps_rad;

% Conductive Coupling
C.C_12 = k_str*l_str*L1*(1/(L2/2)+1/(L3/2));
C.C_13 = k_str*l_str*L2*(1/(L1/2)+1/(L3/2));
C.C_14 = k_str*l_str*L1*(1/(L2/2)+1/(L3/2));
C.C_15 = k_str*l_str*L2*(1/(L1/2)+1/(L3/2));
C.C_16 = 0;
C.C_23 = k_str*l_str*L3*(1/(L1/2)+1/(L2/2));
C.C_25 = k_str*l_str*L3*(1/(L1/2)+1/(L2/2));
C.C_24 = 0;
C.C_26 = C.C_12;
C.C_34 = C.C_23;
C.C_35 = 0;
C.C_36 = C.C_13;
C.C_45 = C.C_34;
C.C_46 = C.C_14;
C.C_56 = C.C_13;
C.C_2rad = k_str*(l_str*L3/(L1/2));
% to tune:
C.C_1rad = 10;
C.C_3rad = 10;
C.C_4rad = 10;
C.C_5rad = 10;
C.C_6rad = 10;

% External fluxes 
q_Sun = q_sun_earth;
q_alb = q_Sun*F_earth*a_earth;
q_Earth = F_earth*sigma_SB*T_earth^4*epsilon_Earth;

% Angles with external fluxes
theta_5Sun = 15 * pi/180;
theta_6Sun = 75 * pi/180;


Q_ext_hot3 = q_Earth*epsilon_MLI*A3 + q_alb*A3*alpha_MLI ;
Q_ext_hot5 = q_Sun * A5 * alpha_MLI* cos(theta_5Sun); 
Q_ext_hot6 = q_Sun * A6 * alpha_MLI* cos(theta_6Sun);

Q_ext_hot = [0;0;Q_ext_hot3;0;Q_ext_hot5;Q_ext_hot6; 0; 0];

% Initial condition
T0 = 293;


% solve
%%% Internal dissipation power
Q_diss_hot =  Q_hot;

%%% SOLVE THE SYSTEM 
T_guess = 273*ones(10,1);
options = optimoptions('fsolve','display','iter','MaxFunctionEvaluations',50000,'Maxiterations',50000);
T_orb_hot = fsolve(@(T) HeatBalance_Orbiter(T, R, C, Q_ext_hot , Q_diss_hot, sigma_SB), T_guess, options);

fprintf(['1 ',num2str(T_orb_hot(1)-273),' Celsius\n'])
fprintf(['2 ',num2str(T_orb_hot(2)-273),' Celsius\n'])
fprintf(['3 ',num2str(T_orb_hot(3)-273),' Celsius\n'])
fprintf(['4 ',num2str(T_orb_hot(4)-273),' Celsius\n'])
fprintf(['5 ',num2str(T_orb_hot(5)-273),' Celsius\n'])
fprintf(['6 ',num2str(T_orb_hot(6)-273),' Celsius\n'])
fprintf(['ant ',num2str(T_orb_hot(7)-273),' Celsius\n'])
fprintf(['rad ',num2str(T_orb_hot(8)-273),' Celsius\n'])
% add mass and specific heat for transient

% Conduction between surfaces
% To do:
% 1) add conduction 
%      - between surfaces
%      - to radiators
% 2) change internal power
% 3) surface in contact with lander?
% 4) Add internal nodes
% sensitivity analysis, check properties
% T of RTG


