%% Set Latex font
set(groot,'defaulttextinterpreter','latex')
set(groot,'defaultLegendInterpreter','latex')
set(groot,'defaultAxesTickLabelInterpreter','latex')
%%
clearvars; clc; close all

% Solar Flux
AU_earth = 1; 
AU_enc = 9.5;
q_sun_enc = 1367.5/AU_enc^2;
q_sun_earth = 1367.5;

% Albedo 
a_earth = 0.35;
a_enc = 0.8;
a_sat = 0.499;

% View Factors 
R_earth = 6371;
R_orbit_earth = 670 + R_earth;
R_enc = 252.1;
R_orbit_enc_min = 20 + R_enc;
R_orbit_enc_max = 1.05e+03 + R_enc;
R_sat = 58232;
R_orbit_sat = 238000;
F_earth = (R_earth/R_orbit_earth)^2;
F_enc_max = (R_enc/R_orbit_enc_min)^2;
F_enc_min = (R_enc/R_orbit_enc_max)^2;
F_sat = (R_sat/R_orbit_sat)^2;

% Radiative parameters
sigma_SB = 5.67e-8;
epsilon_Earth = 0.85;
epsilon_Enc = 1;
epsilon_sat = 1;
T_earth = 255.25;
T_Enc = 72;
T_Sat = 97;

% External fluxes 
q_Sun = q_sun_earth;
q_alb = q_Sun * F_earth * a_earth;
q_Earth = F_earth * sigma_SB * T_earth^4 * epsilon_Earth;

%%% Spacecraft %%%

% Area
L1_O = 3.8;
L2_O = 4.51;
L3_O = 2.7;

A1_O = L1_O*L2_O;
A6_totO = A1_O;
A6_intO = A6_totO;
A2O = L1_O*L3_O;
A4O = A2O;
A3O = L2_O*L3_O;
A5_totO = A3O;
A5_intO = A5_totO;
A5O = A5_intO;
D_ant = 3.8; % diameter of antenna [m]
A_ant = pi*(D_ant/2)^2; 
A1_extO = A1_O - A_ant; % external area of surface 1 not covered by the antenna

%%% Structure properties (Al-5056-O)
k_str = 117;
% l_str = 0.02; %%%%%%%%%??
% l_str = 0.002; 
l_strO = 0.002; % HYP : skin thickness of 5 mm

l_str_totO = 10e-3;
k_honeycomb = 2.036; % sensitivity analysis: 0.852
% Structure
% epsilon_int = 0.23; %%%%%%%%%%????????????????' aluminum ???????? -> to change, sentitivity analysis
% epsilon_int = 0.874; % black paint to maximize exchange (you can change it)
% epsilon_int = 0.034; 
epsilon_5O =  0.874; % black paint to maximize exchange
epsilon_6O = 0.874; % black paint to maximize exchange
epsilon_1O = 0.874; 
epsilon_2O = 0.874; 
epsilon_3O = 0.874; 
epsilon_4O = 0.874;
epsilon_15O = 0.874; 
% epsilon_5 = 0.034;
% epsilon_6 = 0.034;
% epsilon_15 = 0.034;
% epsilon_1 = 0.034;
% epsilon_2 = 0.034;
epsilon_3O = 0.034;
% epsilon_4 = 0.034;
% epsilon_MLI = 0.03;
epsilon_MLIO = 0.02; %%%%%%%%%%%%%%%%%%%%%%
% alpha_MLI = 0.08 (Kapton, silvered, aluminum oxide coated, 1 mil)
%           = 0.11 Kapton, aluminized, silicon oxide coated, 1 mil
%           = 0.12 typical
alpha_MLIO = 0.11; 

% Antenna painted white: Vita-var PV-100 white paint
% alpha_ant = 0.22; % from 0.17 to 0.27
% epsilon_ant = 0.82; % do sensitivity analysis up to 0.9
% antenna coating : PCBZ (book says 0.16 to 0.24 )
alpha_ant = 0.2; % BOL
% alpha_ant_EOL = 0.4;
epsilon_ant = 0.86;

% Thermal straps
k_TS = 398; 
L_TS = 120e-3; %?????

% Radiators
% changed from 0.8: if louvers open ~0.7
eps_louv_closed = 0.14;
eps_louv_open = 0.7;
eps_rad = eps_louv_open; % if open louvers

% eps_rad = 0.8;  % if ideal radiators and not louvers
alpha_louv_closed = 0.062; 
alpha_louv_open = 0.269; % (worst case EOL)
A_rad_one = 1 *536*397e-6; % area one radiator.
% SENER LOUVER: 0.2128 m^2. consider also the structure... ok 0.2m^2
n_rad_5O = 0; %% can be changed
n_rad_6O = 12;
A_rad_tot_5O = A_rad_one*n_rad_5O;% total area of radiators
A_rad_tot_6O = A_rad_one*n_rad_6O;
A5_extO = A5_intO-A_rad_tot_5O; % area on surface 5 not covered by radiators
A6_extO = A6_totO-A_rad_tot_6O;
A_rad_totO = A_rad_tot_5O + A_rad_tot_6O;
% RHU or heaters
n_RHU = 0; % you can change this!
P_RHU = 1; % 1 W is the thermal power generated by each RHU 


%%
% Power
P_budget_hot = 347.56;
P_input_TMTC_h = 29.93; % ask Antoine %%%%%%%%%%%%%
P_diss_TMTC_h = 23.96;  % ask Antoine %%%%%%%%%%%%%
% add batteries ...
We = 456;              % electrical power from RTG
Wt = 3040;             % thermal power from RTG
Q_RHU_added = 0;
Q_pl_budget_mode = 74;
Q_hotO = P_budget_hot - P_input_TMTC_h+P_diss_TMTC_h - Q_pl_budget_mode; 
Q_shunt = We - Q_hotO; % check if a shunt can dissipate this power

% view factor
% % Surface 1
% F12 = VF_PerpRec(L3,L2,L1);
% F21 = F12*A1/A2;
% F13 = VF_PerpRec(L3,L1,L3);
% F31 = F13*A1/A3;
% F14 = VF_PerpRec(L3,L2,L1);
% F41 = VF_PerpRec(L2,L3,L1);
% F15_tot = F13;
% F51_tot = F15_tot*A5_tot/A1;
% F1rad = F15_tot*A_rad_tot/A5_tot;
% Frad1 = F1rad*A1/A_rad_tot; 
% F15 = F15_tot*A5/A5_tot;
% F51 = F15*A1/A5;
% F16 = VF_ParallelEqualRec(L3,L1,L2);
% F61 = F16;
H15 = 2600e-3;

F12 = 1*H15/L2_O;
F21 = VF_PerpRec(L2_O,L3_O,L1_O);
F13 = VF_PerpRec(L3_O,L1_O,L2_O-H15);
F31 = F13*(L2_O-H15)/L3_O;
F14 = VF_PerpRec(L3_O,L2_O-H15,L1_O);
F41 = F14*(L2_O-H15)/L3_O;
F15 = F13;
F51 = F31;
F16 = VF_ParallelEqualRec(L3_O,L1_O,L2_O-H15);
F61 = F16;
F115 = VF_PerpRec(L3_O,L2_O-H15,L1_O);
% Surface 2 
% F23 = VF_PerpRec(L2,L3,L1);
% F32 = F23*A2/A3;
% F24 = VF_ParallelEqualRec(L2,L1,L3);
% F42 = F24*A2/A4;
% F25_tot = VF_PerpRec(L2,L3,L1);
% F52_tot = F25_tot*A5_tot/A2;
% F2rad = F25_tot*A_rad_tot/A5_tot;
% Frad2 = F2rad*A2/A_rad_tot; 
% F25 = F25_tot*A5/A5_tot;
% F52 = F25*A2/A5;
% F26 = VF_PerpRec(L2,L3,L1);
% F62 = F26*A2/A6;
F32 = 1*H15/L2_O;
F23 = VF_PerpRec(L2_O,L1_O,L3_O);
F215 = VF_ParallelEqualRec(H15,L1_O,L3_O);
F315 = VF_PerpRec(L1_O,L2_O-H15,L3_O);
F42 = 0;
F415 = VF_ParallelEqualRec(L2_O-H15,L1_O,L3_O);
F515 = F315;
F615 = F115;
F24 = 0;
F62 = F12;
F26 = F21;
F52 = F32;
Frad2 = 0;
F25 = F23;
F2rad = 0;

% Surface 3
% F34 = F32;
% F43 = F23;
% F35_tot = VF_ParallelEqualRec(L1,L2,L3);
% F53_tot = F35_tot*A5_tot/A3;
% F3rad = F35_tot*A_rad_tot/A5_tot;
% Frad3 = F3rad*A3/A_rad_tot; 
% F35 = F35_tot*A5/A5_tot;
% F53 = F35*A3/A5;
% F36 = F31;
% F63 = F13;
F34 = VF_PerpRec(L1_O,L2_O-H15,L3_O);
F43 = F34*(L2_O-H15)/L1_O;
F35_tot =  VF_ParallelEqualRec(L1_O,H15,L3_O);
F53_tot = F35_tot;
F3rad = 0;
Frad3 = 0; 
F35 =  VF_ParallelEqualRec(L1_O,H15,L3_O);
F53 = F35_tot;
F36 = F31;
F63 = F13;

% Surface 4
% F45_tot = F43;
% F54_tot = F45_tot*A5_tot/A4;
% F4rad = F45_tot*A_rad_tot/A5_tot;
% Frad4 = F4rad*A4/A_rad_tot; 
% F45 = F45_tot*A5/A5_tot;
% F54 = F45*A4/A5;
% F46 = F41; 
% F64 = F14;

F45_tot = 0;
F54_tot = 0;
F4rad = 0;
Frad4 = 0; 
F45 = F43;
F54 = F34;
F46 = F41;
F64 = F14;

% Surface 6
% F65_tot = F63;
% F56_tot = F65_tot*A5_tot/A6;
% F6rad = F65_tot*A_rad_tot/A5_tot;
% Frad6 = F6rad*A6/A_rad_tot; 
% F65 = F65_tot*A5/A5_tot;
% F56 = F65*A6/A5;

F65_tot = 0;
F56_tot = 0;
F6rad = 0;
Frad6 = 0; 
F65 = 0;
F56 = 0;
F1rad = 0;
% radiative coupling
RO.R_12 = sigma_SB * A1_O * epsilon_1O*epsilon_2O * F12;
RO.R_1rad = 0;
RO.R_13 = sigma_SB * A1_O * epsilon_1O*epsilon_3O * F13;
RO.R_14 = sigma_SB * A1_O * epsilon_1O*epsilon_4O * F14;
RO.R_15 = sigma_SB * A1_O * epsilon_1O*epsilon_5O * F15;
RO.R_16 = sigma_SB * A1_O * epsilon_1O*epsilon_6O * F16;
RO.R_23 = sigma_SB * A2O * epsilon_2O*epsilon_3O * F23;
% R.R_24 = sigma_SB * A2 * epsilon_2*epsilon_4 * F24;
RO.R_24 = 0;
RO.R_25 = sigma_SB * A2O * epsilon_2O*epsilon_5O * F25;
RO.R_26 = sigma_SB * A2O * epsilon_2O*epsilon_6O * F26;
RO.R_rad3 = 0; % ?
RO.R_rad4 = 0; % ?
RO.R_rad2 = 0; % ?
RO.R_rad6 = sigma_SB * A_rad_tot_6O * epsilon_MLIO; % ?
RO.R_rad5 = sigma_SB * A_rad_tot_5O * epsilon_MLIO;
RO.R_34 = sigma_SB * A3O * epsilon_3O*epsilon_4O * F34;
RO.R_35 = sigma_SB * A3O * epsilon_3O*epsilon_5O * F35;
RO.R_36 = sigma_SB * A3O * epsilon_3O*epsilon_6O * F36;
RO.R_45 = sigma_SB * A4O * epsilon_4O*epsilon_5O * F45;
RO.R_46 = sigma_SB * A4O * epsilon_4O*epsilon_6O * F46;
RO.R_56 = sigma_SB * A5O * epsilon_5O*epsilon_6O * F56;

RO.R_115 = sigma_SB * A1_O * epsilon_1O*epsilon_15O * F115;
RO.R_215 = sigma_SB * A2O * epsilon_2O*epsilon_15O * F215;
RO.R_315= sigma_SB * A3O * epsilon_3O*epsilon_15O * F315;
RO.R_415= sigma_SB * A4O * epsilon_4O*epsilon_15O * F415;
RO.R_515= sigma_SB * A5O * epsilon_5O*epsilon_15O * F515;
RO.R_615= sigma_SB * A6_intO * epsilon_6O*epsilon_15O * F615;
nc = 100;
CO.C_115 =( 1/(k_str*l_strO*L1_O*(+1/(L3_O/2))) + 1/(nc*l_strO*L1_O))^(-1);
CO.C_215 = 0;
CO.C_315 = (1/(k_str*l_strO*L3_O*(+1/(L1_O/2)))+ 1/(nc*l_strO*L3_O))^(-1);

CO.C_315 = 0;
CO.C_415  = 0;
CO.C_515  = CO.C_315 ;
CO.C_615 = CO.C_115;


RO.R_1ant = sigma_SB * (A1_O-A1_extO) * epsilon_MLIO; % ????? not sure about this. also conduction. and not only MLI
C_1ant_max = k_str * l_strO/(A1_O - A1_extO);
CO.C_1ant = C_1ant_max/10;  % hyp: diameter of contact antenna - structure is 1/10 of D antenna 
% C.C_1ant = 0;
RO.R_10 = sigma_SB * A1_extO * epsilon_MLIO;
RO.R_20 = sigma_SB * A2O * epsilon_MLIO;
RO.R_30 = sigma_SB * A3O * epsilon_MLIO;
RO.R_40 = sigma_SB * A4O * epsilon_MLIO;
A4_clamped = A4O - 1.5*1.5;
RO.R_40_clamped = sigma_SB * A4_clamped * epsilon_MLIO;
RO.R_50 = sigma_SB * A5_extO * epsilon_MLIO;
RO.R_60 = sigma_SB * A6_extO * epsilon_MLIO;
% R.R_60 = sigma_SB * (A6) * epsilon_MLI;
RO.R_ant0 = sigma_SB * A_ant * epsilon_ant;
RO.R_rad0 = sigma_SB * A_rad_totO * eps_rad;
RO.R_rad15 = 0;
% Add MLI on surface 3, 2, 6 
RO.R_6int6ext = sigma_SB * A6_extO * epsilon_MLIO;
RO.R_3int3ext = sigma_SB * A3O * epsilon_MLIO;
RO.R_2int2ext = sigma_SB * A2O * epsilon_MLIO;
RO.R_1int1ext = sigma_SB * A1_O * epsilon_MLIO;
RO.R_4int4ext = sigma_SB * A4O * epsilon_MLIO;
RO.R_5int5ext = sigma_SB * A5_extO * epsilon_MLIO;

% Conduction normal to honeycomb panel
CO.C_1int1ext = k_honeycomb*(A1_O/(l_str_totO));
CO.C_2int2ext = k_honeycomb*(A2O/(l_str_totO));
CO.C_3int3ext = k_honeycomb*(A3O/(l_str_totO));
CO.C_4int4ext = k_honeycomb*(A4O/(l_str_totO));
CO.C_5int5ext = k_honeycomb*(A5_extO/(l_str_totO));
CO.C_6int6ext = k_honeycomb*(A6_extO/(l_str_totO));

% Conductive Coupling
nc = 100;
C1 = k_str*l_strO*L1_O/(L2_O/2);
C2 = k_str*l_strO*L1_O/(L3_O/2);
C_cont = nc*l_strO*L1_O;
CO.C_12 = (1/C1 + 1/C2 + 1/C_cont)^(-1);
C1 = k_str*l_strO*L2_O/(L1_O/2);
C3 = k_str*l_strO*L2_O/(L3_O/2);
C_cont = nc*l_strO*L2_O;
CO.C_13 = (1/C1 + 1/C3 + 1/C_cont)^(-1);
C1 = k_str*l_strO*L1_O/(L2_O/2);
C4 = k_str*l_strO*L1_O/(L3_O/2);
C_cont = nc*l_strO*L1_O;
CO.C_14 = (1/C1 + 1/C4 + 1/C_cont)^(-1);
C1 = k_str*l_strO*L2_O/(L1_O/2);
C5 = k_str*l_strO*L2_O/(L3_O/2);
C_cont = nc*l_strO*L2_O;
CO.C_15 = (1/C1 + 1/C5 + 1/C_cont)^(-1);
CO.C_16 = 0;
C2 = k_str*l_strO*L3_O/(L1_O/2);
C3 = k_str*l_strO*L3_O/(L2_O/2);
C_cont = nc*l_strO*L3_O;
CO.C_23 = (1/C2 + 1/C3 + 1/C_cont)^(-1);
C2 = k_str*l_strO*L3_O/(L1_O/2);
C5 = k_str*l_strO*L3_O/(L2_O/2);
C_cont = nc*l_strO*L3_O;
CO.C_25 = (1/C2 + 1/C5 + 1/C_cont)^(-1);
CO.C_24 = 0;
CO.C_26 = CO.C_12;
CO.C_34 = CO.C_23;
CO.C_35 = 0;
CO.C_36 = CO.C_13;
CO.C_36 = 0; %%%%%%%%%%%%%%%%%%%%
CO.C_45 = CO.C_34;
CO.C_46 = CO.C_14;
CO.C_56 = CO.C_13;

l_str_totO = 20e-3;
CO.C_1rad = 0;
CO.C_2rad = 0;
CO.C_3rad = 40;    % to radiators on surface 6
CO.C_4rad = 0;
CO.C_6rad = 20;
CO.C_5rad = 0; % HYP: HP both for electronics TMTC, batteries and OBDH
CO.C_15rad = 40;



%% Data Lander
%%% Structure properties (Al-5056-O)
k_str = 117;
% l_str = 0.02;
l_strl = 0.003;
l_str_totl = 10e-3;
k_honeycombl = 2.036; % sensitivity analysis: 0.852
% Structure
% epsilon_int = 0.23; %%%%%%%%%%????????????????' aluminum ???????? -> to change, sentitivity analysis
% epsilon_int = 0.874; % black paint to maximize exchange (you can change it)
% epsilon_int = 0.034; 
epsilon_5l =  0.874; % black paint to maximize exchange
epsilon_6l = 0.874; % black paint to maximize exchange
epsilon_1l = 0.874; 
epsilon_2l = 0.874; 
epsilon_3l = 0.874; 
epsilon_4l = 0.874;
% epsilon_8 = 0.874;
epsilon_8l = 0.034;
% epsilon_5 = 0.034;
% epsilon_6 = 0.034;
% epsilon_8 = 0.034;
% epsilon_1 = 0.034;
% epsilon_2 = 0.034;
% epsilon_3 = 0.034;
% epsilon_4 = 0.034;

% MLI 
epsilon_MLIl = 0.03;
% alpha_MLI = 0.08 (Kapton, silvered, aluminum oxide coated, 1 mil)
%           = 0.11 Kapton, aluminized, silicon oxide coated, 1 mil
%           = 0.12 typical
alpha_MLIl = 0.11;


n_radl= 3.5; %% can be changed
A_rad_totl = A_rad_one*n_radl;% total area of radiators


% Areas
L1l = 1.5; L3l = 1.5; L2l = 1.8;
A1l = L1l*L2l;
A2l = L1l*L3l;
A3l = L2l*L3l;
A4l = A2l;
A5_totl = A3l;
A5l = A5_totl;
A5_intl = A5l;
A6l = A1l;
A6_totl = A6l;
A6_extl = A6_totl - A_rad_totl;


% Power
P_budget_hot = 0;
P_input_TMTC_h = 0;
P_diss_TMTC_h = 0;
% add batteries ...
We = 279;
Wt = 1860;
% eff_shunt = 0.6;
% Q_hot = We*eff_shunt;
Q_hotl  = 0;
P_shunt = - Q_hotl + We; % check power can be dissipated though a shunt
% view factor
% Surface 1
H8 = 830e-3; 
L = L1l;
A8 = L1l*L3l;
F12_a = VF_PerpRec(L3l,H8,L1l);
F13_a = VF_PerpRec(L3l,L1l,H8);
F15_a = F13_a;
F16_a = VF_ParallelEqualRec(L3l,L1l,H8);
F18_a = VF_PerpRec(L3l,H8,L1l)*H8/L2l;
F12 = (F12_a + F13_a + F15_a + F16_a)*H8/L2l;
F13 = VF_PerpRec(L3l,L1l,L2l-H8)*(L2l-H8)/L2l;
F14 = VF_PerpRec(L3l,L2l-H8,L1l)*(L2l-H8)/L2l;
F15 = F13*(L2l-H8)/L2l;
F16 = VF_ParallelEqualRec(L3l,L1l,L2l-H8)*(L2l-H8)/L2l;
F18_b = VF_PerpRec(L3l,L2l-H8,L1l)*(L2l-H8)/L2l;
F18 = F18_a + F18_b;
F21 = F12_a*H8/L2l;
F31 = F13;
F41 = F14;
F51 = F15;
F61 = F16;
F81 = F18*A1l/A8;

% Surface 2
F23 = F21;
F32 = F12;
F24 = 0;
F42 = 0;
F25 = F21;
F52 = F12;
F26 = F21;
F62 = F12;
F28 = VF_ParallelEqualRec(H8,L3l,L1l);
F82 = F28;

% Surface 3
F34 = F14;
F43 = F41;
F35 = F16;
F53 = F61;
F36 = F13;
F63 = F31;
F38 = F18;
F83 = F81;

% Surface 4
F45 = F43;
F54 = F34;
F46 = F45;
F64 = F54;
F48 = VF_ParallelEqualRec(L2l-H8,L3l,L1l);
F84 = F48;

% Surface 5
F56 = F13;
F65 = F31;
F58 = F18;
F85 = F81;

% Surface 6
F68 = F58;
F86 = F85;

F81 = F81/2;
F82 = F82/2;
F83 = F83/2;
F84 = F84/2;
F85 = F85/2;
F86 = F86/2;

% radiative coupling
Rl.R_12 = sigma_SB * A1l * epsilon_1l * epsilon_2l * F12;
Rl.R_1rad = 0;
Rl.R_13 = sigma_SB * A1l * epsilon_1l * epsilon_3l * F13;
Rl.R_14 = sigma_SB * A1l * epsilon_1l * epsilon_4l * F14;
Rl.R_15 = sigma_SB * A1l * epsilon_1l * epsilon_5l * F15;
Rl.R_16 = sigma_SB * A1l * epsilon_1l * epsilon_6l * F16;
Rl.R_18 = sigma_SB * A1l * epsilon_1l * epsilon_8l * F18;
Rl.R_23 = sigma_SB * A2l * epsilon_2l * epsilon_3l * F23;
Rl.R_24 = sigma_SB * A2l * epsilon_2l * epsilon_4l * F24;
Rl.R_25 = sigma_SB * A2l * epsilon_2l * epsilon_5l * F25;
Rl.R_26 = sigma_SB * A2l * epsilon_2l * epsilon_6l * F26;
Rl.R_28 = sigma_SB * A2l * epsilon_2l * epsilon_8l * F28;
Rl.R_rad3 = 0; % ?
Rl.R_rad4 = 0; % ?
Rl.R_rad2 = 0; % ?
Rl.R_rad6 = 0; % ?
Rl.R_rad8 = 0; % ?
Rl.R_rad5 = 0;
Rl.R_34 = sigma_SB * A3l * epsilon_3l * epsilon_4l * F34;
Rl.R_35 = sigma_SB * A3l * epsilon_3l * epsilon_5l * F35;
Rl.R_36 = sigma_SB * A3l * epsilon_3l * epsilon_6l * F36;
Rl.R_38 = sigma_SB * A3l * epsilon_3l * epsilon_8l * F38;
Rl.R_45 = sigma_SB * A4l * epsilon_4l * epsilon_5l * F45;
Rl.R_46 = sigma_SB * A4l * epsilon_4l * epsilon_6l * F46;
Rl.R_48 = sigma_SB * A4l * epsilon_4l * epsilon_8l * F48;
Rl.R_56 = sigma_SB * A5_intl * epsilon_5l * epsilon_6l * F56;
Rl.R_58 = sigma_SB * A5_intl * epsilon_5l * epsilon_8l * F58;
Rl.R_10 = sigma_SB * A1l * epsilon_MLIl;
Rl.R_20 = sigma_SB * A2l * epsilon_MLIl;
Rl.R_30 = sigma_SB * A3l * epsilon_MLIl;
Rl.R_40 = sigma_SB * A4l * epsilon_MLIl;
Rl.R_50 = sigma_SB * A5l * epsilon_MLIl;
Rl.R_60 = sigma_SB * A6_extl * epsilon_MLIl;
Rl.R_rad0 = sigma_SB * A_rad_totl * eps_rad;

% Add MLI on surface 3
Rl.R_3int3ext = sigma_SB * A3l * epsilon_MLIl;
Rl.R_1int1ext = sigma_SB * A1l * epsilon_MLIl;
Rl.R_2int2ext = sigma_SB * A2l * epsilon_MLIl;
Rl.R_4int4ext = sigma_SB * A4l * epsilon_MLIl;
Rl.R_5int5ext = sigma_SB * A5l * epsilon_MLIl;
Rl.R_6int6ext = sigma_SB * A6l * epsilon_MLIl;
Cl.C_1int1ext = k_honeycombl*(A1l/(l_str_totl));
Cl.C_2int2ext = k_honeycombl*(A2l/(l_str_totl));
Cl.C_3int3ext = k_honeycombl*(A3l/(l_str_totl));
Cl.C_4int4ext = k_honeycombl*(A4l/(l_str_totl));
Cl.C_5int5ext = k_honeycombl*(A5l/(l_str_totl));
Cl.C_6int6ext = k_honeycombl*(A6_extl/(l_str_totl));
% Conductive Coupling
% Conductive Coupling
nc = 100;
C1 = k_str*l_strl*L1l/(L2l/2);
C2 = k_str*l_strl*L1l/(L3l/2);
C_cont = nc*A1l;
Cl.C_12 = (1/C1 + 1/C2 + 1/C_cont)^(-1);
C1 = k_str*l_strl*L2l/(L1l/2);
C3 = k_str*l_strl*L2l/(L3l/2);
C_cont = nc*A3l;
Cl.C_13 = (1/C1 + 1/C3 + 1/C_cont)^(-1);
C1 = k_str*l_strl*L1l/(L2l/2);
C4 = k_str*l_strl*L1l/(L3l/2);
C_cont = nc*A4l;
Cl.C_14 = (1/C1 + 1/C4 + 1/C_cont)^(-1);
C1 = k_str*l_strl*L2l/(L1l/2);
C5 = k_str*l_strl*L2l/(L3l/2);
C_cont = nc*A5_intl;
Cl.C_15 = (1/C1 + 1/C5 + 1/C_cont)^(-1);
Cl.C_16 = 0;
C2 = k_str*l_strl*L3l/(L1l/2);
C3 = k_str*l_strl*L3l/(L2l/2);
C_cont = nc*A3l;
Cl.C_23 = (1/C2 + 1/C3 + 1/C_cont)^(-1);
C2 = k_str*l_strl*L3l/(L1l/2);
C5 = k_str*l_strl*L3l/(L2l/2);
C_cont = nc*A5_intl;
Cl.C_25 = (1/C2 + 1/C5 + 1/C_cont)^(-1);
Cl.C_24 = 0;
Cl.C_26 = Cl.C_12;
Cl.C_34 = Cl.C_23;
Cl.C_35 = 0;
Cl.C_36 = Cl.C_13;
Cl.C_36 = 0; %%%%%%%%%%%%%%%%%%%%
Cl.C_45 = Cl.C_34;
Cl.C_46 = Cl.C_14;
Cl.C_56 = Cl.C_13;

Cl.C_18 = (1/(k_str*l_strl*L1l*(+1/(L3l/2))) + 1/(nc*l_strl*L1l))^(-1);
Cl.C_28 = 0;
Cl.C_38 = (1/(k_str*l_strl*L3l*(+1/(L1l/2))) + 1/(nc*l_strl*L3l))^(-1);
Cl.C_48 = 0;
Cl.C_58 = (1/(k_str*l_strl*L3l*(+1/(L1l/2))) + 1/(nc*l_strl*L3l))^(-1);
Cl.C_68 = Cl.C_18;
% to tune:
R_HP_min = 0.04;
R_HP_max = 0.76;
C_HP_max = 1/R_HP_min;
C_HP_min = 1/R_HP_max;
C_TS = 5;
Cl.C_1rad = 0;
Cl.C_2rad = 10;
Cl.C_3rad = 0;    % opposite surface
Cl.C_4rad = 0;
Cl.C_6rad = 10;
Cl.C_8rad = 10;
Cl.C_5rad = 3;

l_str_totl = 20e-3; % do sensitivity analysis

%% Coupling lander - orbiter
A_adapter = 108306.41e-6;
h_adapter = 90e-3;
% from 0 to :
k_adapter = k_str;
CO.R_4o2l = A_adapter*k_adapter/h_adapter;

% CO.R_4o2l  = 0;
RO.R_4o2l = 0;
%%
% Angles with external fluxes
theta_6Sun = 24.7 * pi/180;
theta_3Sun = 90 - theta_6Sun;

Q_ext_hoto = zeros(8,1);
% HOT CASE 1 : cameras towards Earth, face 5 sees the Sun
% HOT CASE 2: cameras towards Earth, antenna towards Sun
% HOT CASE 3: HGA (1) towards Earth, RTGs (6) towards Sun
% HOT CASE 4: FIRST FLYBY, PL towards Earth
% HOT CASE 5: FIRST FLYBY, HGA towards Earth
hot_case = 6;

switch hot_case
    case 1
        theta_5Sun = deg2rad(20);
        theta_6Sun = pi/2 - theta_5Sun;
        Q_ext_hoto(3) = q_Earth * epsilon_MLIO*A3O + q_alb*A3O*alpha_MLIO ;
        Q_ext_hoto(5) = q_Sun * A5 * alpha_MLIO* cos(theta_5Sun); 
        Q_ext_hoto(6) = q_Sun * A6 * alpha_MLIO* cos(theta_6Sun);
    case 2
        theta_antSun = 0;
        Q_ext_hoto(7) = q_Sun * A_ant * alpha_ant* cos(theta_antSun);
        Q_ext_hoto(1) = q_Sun * A1_extO * alpha_MLIO* cos(theta_antSun);
        Q_ext_hoto(3) = q_Earth*epsilon_MLIO*A3O + q_alb*A3O*alpha_MLIO ;
      
    case 3
        Q_ext_hoto(6) = q_Sun * A6 * alpha_MLIO* cos(theta_6Sun);
        Q_ext_hoto(3) = q_Sun * A3O * alpha_MLIO* cos(theta_3Sun);
        Q_ext_hoto(1) = q_Earth * epsilon_MLIO * A1_extO + q_alb * A1_extO * alpha_MLIO ;
        Q_ext_hoto(7) = q_Earth * epsilon_ant * A_ant + q_alb * A_ant * alpha_ant ;
    case 4
        % first fly by: point cameras towards Earth
        theta_S1 = deg2rad(65.63);
        theta_S2 = deg2rad(70);
        theta_S3 = deg2rad(25);
        Q_ext_hoto(1) = q_Sun * A1_extO * alpha_MLIO* cos(theta_S1);
        Q_ext_hoto(2) = q_Sun * A2O * alpha_MLIO* cos(theta_S2);
        Q_ext_hoto(3) = q_Earth * epsilon_MLIO * A3O + q_alb * A3O * alpha_MLIO + q_Sun * A3O * alpha_MLIO* cos(theta_S3);
        Q_ext_hoto(7) = q_Sun * A_ant * alpha_ant* cos(theta_S1);
       case 5
        % first fly by: point HGA towards Earth
        theta_S5 = deg2rad(65.63);
        theta_S2 = deg2rad(70);
        theta_S1 = deg2rad(25);
        Q_ext_hoto(1) = q_Sun * A1_extO * alpha_MLIO* cos(theta_S1) + q_Earth * epsilon_MLIO * A1_extO + q_alb * A1_extO * alpha_MLIO;
        Q_ext_hoto(2) = q_Sun * A2O * alpha_MLIO* cos(theta_S2);
        Q_ext_hoto(7) = q_Sun * A_ant * alpha_ant* cos(theta_S1) + q_Earth * epsilon_ant * A_ant + q_alb * A_ant * alpha_ant;
        Q_ext_hoto(5) = q_Sun * A5_extO * alpha_MLIO* cos(theta_S5);
        Q_ext_hoto(8) = q_Sun * A_rad_tot_5O * alpha_louv_open* cos(theta_S5);
    case 6 
        theta_S5 = deg2rad(9);
        theta_S1 = deg2rad(83.1);
        Q_ext_hoto(1) = q_Sun * A1_extO * alpha_MLIO* cos(theta_S1);
        Q_ext_hoto(7) = q_Sun * A_ant * alpha_ant* cos(theta_S1);
        Q_ext_hoto(5) = q_Sun * A5O * alpha_MLIO* cos(theta_S5);
        Q_ext_hoto(3) = q_Earth * epsilon_MLIO * A3O + q_alb * A3O * alpha_MLIO;


end

%%% Internal dissipation power
Q_diss_hoto = zeros(15,1);
Q_diss_hoto(15) =  Q_hotO/2;
Q_diss_hoto(6) = Q_hotO/2;
%%
Q_ext_hotl = zeros(9,1);

hot_case = 6;

switch hot_case
    case 1
        theta_5Sun = 15 * pi/180;
        theta_6Sun = 75 * pi/180;
        Q_ext_hotl(3) = q_Earth*epsilon_MLIl*A3l + q_alb*A3l*alpha_MLIl ;
        Q_ext_hotl(5) = q_Sun * A5 * alpha_MLIl* cos(theta_5Sun); 
        Q_ext_hotl(6) = q_Sun * A6l * alpha_MLIl* cos(theta_6Sun);
    case 2
        theta_1Sun = 0;
        Q_ext_hotl(1) = q_Sun * A1l * alpha_MLIl* cos(theta_1Sun);
        Q_ext_hotl(3) = q_Earth*epsilon_MLIl*A3l + q_alb*A3l*alpha_MLIl ;
        Q_ext_hotl(7) = q_Sun * A_rad_totl * alpha_louv_open* cos(theta_1Sun);
    case 3
        Q_ext_hotl(6) = q_Sun * A6l * alpha_MLIl* cos(theta_6Sun);
        Q_ext_hotl(3) = q_Sun * A3l * alpha_MLIl* cos(theta_3Sun);
        Q_ext_hotl(1) = q_Earth * epsilon_MLIl * A1l + q_alb * A1l * alpha_MLIl ;
    case 4
        % first fly by: point cameras towards Earth
        theta_S1 = deg2rad(65.63);
        theta_S2 = deg2rad(70);
        theta_S3 = deg2rad(25);
        Q_ext_hotl(1) = q_Sun * A1l * alpha_MLIl* cos(theta_S1);
        Q_ext_hotl(2) = 0;
        Q_ext_hotl(3) = q_Earth * epsilon_MLIl * A3l + q_alb * A3l * alpha_MLIl + q_Sun * A3l * alpha_MLIl* cos(theta_S3);
       case 5
        % first fly by: point HGA towards Earth
        theta_S5 = deg2rad(65.63);
        theta_S2 = deg2rad(70);
        theta_S1 = deg2rad(25);
        Q_ext_hotl(1) = q_Sun * A1l * alpha_MLIl* cos(theta_S1) + q_Earth * epsilon_MLIl * A1l + q_alb * A1l * alpha_MLIl;
        Q_ext_hotl(2) = q_Sun * A2l * alpha_MLIl* cos(theta_S2);
        Q_ext_hotl(5) = q_Sun * A5_extl * alpha_MLIl* cos(theta_S5);
        % Q_ext_hot(7) = q_Sun * A_rad_tot * alpha_louv_open* cos(theta_S5);

        case 6
        theta_S5 = deg2rad(9);
        theta_S1 = deg2rad(83.1);
        Q_ext_hotl(1) = q_Sun * A1l * alpha_MLIl* cos(theta_S1);
        Q_ext_hotl(5) = q_Sun * A5l * alpha_MLIl* cos(theta_S5);
        Q_ext_hotl(3) = q_Earth * epsilon_MLIl * A3l + q_alb * A3l * alpha_MLIl;

end

% solve
%%% Internal dissipation power
Q_diss_hotl = zeros(8,1);
Q_diss_hotl(5) =  Q_hotl/2;
Q_diss_hotl(2) =  Q_hotl/2;
%%
% Initial condition
T0 = 293;

% solve

%%% SOLVE THE SYSTEM 
Clamped = 1;
T_guesso = 273*ones(15,1);
T_guessl = 273*ones(14,1);
T_guess = [T_guesso;T_guessl ];
options = optimoptions('fsolve','display','iter','MaxFunctionEvaluations',500000,'Maxiterations',50000);
T_hot = fsolve(@(T) HeatBalance_Clamped(T, RO,Rl, CO,Cl, Q_ext_hoto ,Q_ext_hotl , Q_diss_hoto,Q_diss_hotl, Clamped), T_guess, options);
T_hoto = T_hot(1:15);
T_land_hot = T_hot(16:end);

fprintf(['1 orb ',num2str(T_hoto(1)-273),' Celsius\n'])
fprintf(['2 orb ',num2str(T_hoto(2)-273),' Celsius\n'])
fprintf(['3 orb ',num2str(T_hoto(3)-273),' Celsius\n'])
fprintf(['4 orb ',num2str(T_hoto(4)-273),' Celsius\n'])
fprintf(['5 orb ',num2str(T_hoto(5)-273),' Celsius\n'])
fprintf(['6 orb ',num2str(T_hoto(6)-273),' Celsius\n'])
fprintf(['ant orb ',num2str(T_hoto(7)-273),' Celsius\n'])
fprintf(['rad orb ',num2str(T_hoto(8)-273),' Celsius\n'])
fprintf(['15 orb ',num2str(T_hoto(15)-273),' Celsius\n'])

fprintf(['1 land ',num2str(T_land_hot(1)-273),' Celsius\n'])
fprintf(['2 land ',num2str(T_land_hot(2)-273),' Celsius\n'])
fprintf(['3 land ',num2str(T_land_hot(3)-273),' Celsius\n'])
fprintf(['4 land ',num2str(T_land_hot(4)-273),' Celsius\n'])
fprintf(['5 land ',num2str(T_land_hot(5)-273),' Celsius\n'])
fprintf(['6 land ',num2str(T_land_hot(6)-273),' Celsius\n'])
fprintf(['rad land ',num2str(T_land_hot(7)-273),' Celsius\n'])
fprintf(['8 land ',num2str(T_land_hot(8)-273),' Celsius\n'])


%% cold case clamped
% orbiter
% Power
P_budget_cold = 258; % RW desaturation
P_input_TMTC_cold = 0;
P_diss_TMTC_cold = 0;
% add batteries ...
We = 389;
Q_pl_tot =   20.4057;
We_TCS = Q_pl_tot; % power required by pl
We_av = We - We_TCS; % power available internally
Wt = 2596;
Q_cold = P_budget_cold-P_input_TMTC_cold+P_diss_TMTC_cold;
P_added_6 = 0;
P_added_15 = 130;
P_VRHU_6 = 0; % for batteries
P_VRHU_3 = 0; % for internal PL
perc = 0;
Q_diss_coldo = zeros(15,1);
Q_diss_coldo(6) = P_added_6 + We_av*perc + P_VRHU_6;
Q_diss_coldo(3) = P_VRHU_3;
Q_diss_coldo(15) = We_av*(1-perc)+ P_added_15;
% close louvers and compute again thermal couplings
eps_rad = eps_louv_closed;

% radiative coupling

RO.R_rad0 = sigma_SB*A_rad_totO * eps_rad;
CO.C_6rad = 1.5; % ? sensitivity analysis
CO.C_5rad = 0; % ? sensitivity analysis
% C.C_13 = C.C_13 + 30;
CO.C_3rad = 5;
CO.C_3rad = 3.8;
CO.C_15rad = 2;
% External fluxes
% IR Heat fluxes for Saturn and Enceladus
q_Sat = F_sat*sigma_SB*T_Sat^4*epsilon_sat;
q_Enc = F_enc_min * sigma_SB * T_Enc^4 *epsilon_Enc;



% External fluxes

Q_ext_coldo = zeros(11,1);

eclipse = 1; % IN ECLIPSE
%eclipse = 0; % no eclipse
switch eclipse
    case 1
    theta_3Enc =deg2rad(50);
    theta_1Enc =deg2rad(40);
    theta_1Sat = 0; % CHANGE!
    Q_ext_coldo(3) = q_Enc * A3O * epsilon_MLIO*cos(theta_3Enc) ;
    Q_ext_coldo(1) = q_Sat * A1_extO * epsilon_MLIO*cos(theta_1Sat) + q_Enc * A1_extO * epsilon_MLIO*cos(theta_1Enc) ;
    Q_ext_coldo(7) = q_Sat * A_ant * epsilon_ant*cos(theta_1Sat) + q_Enc * A_ant * epsilon_ant*cos(theta_1Enc);
    case 0
    theta_3Enc =deg2rad(10);
    theta_6Enc =deg2rad(80);
    theta_6Sat = 0; % CHANGE!
    theta_1Sun = deg2rad(1);
    Q_ext_cold(3) = q_Enc * A3 * epsilon_MLI*cos(theta_3Enc) + q_alb_enc * A3 * alpha_MLI*cos(theta_3Enc) ;
    Q_ext_cold(1) = q_sun_enc * A1_ext * alpha_MLI*cos(theta_1Sun) ;
    Q_ext_cold(7) = q_sun_enc * A_ant * alpha_ant*cos(theta_1Sun);
    Q_ext_cold(6) = q_Enc * A6_ext * epsilon_MLI*cos(theta_6Enc) + q_alb_enc * A6_ext * alpha_MLI*cos(theta_6Enc) + ...
        q_Sat * A6_ext * epsilon_MLI*cos(theta_6Sat) + q_alb_sat * A6_ext * alpha_MLI*cos(theta_6Sat); 
Q_ext_coldo(8) = q_Enc * A_rad_tot_6 * eps_rad*cos(theta_6Enc) + q_alb_enc * A_rad_tot_6 * alpha_louv_closed*cos(theta_6Enc) + ...
        q_Sat * A_rad_tot_6 * eps_rad*cos(theta_6Sat) + q_alb_sat * A_rad_tot_6 * alpha_louv_closed*cos(theta_6Sat); 
end

% lander

% Power
P_budget_cold = 211.14;
P_input_TMTC_cold = 0;       % ask Antoine
P_diss_TMTC_cold =0;      % ask Antoine
% add batteries ...
We = 239;
Wt = 1589;
Q_cold = P_budget_cold-P_input_TMTC_cold+P_diss_TMTC_cold;

Q_diss_coldl = zeros(8,1);

% external fluxes
cold_case = 1; % orbit / during landing
% cold_case = 2; % on ground
Q_ext_cold = zeros(7,1);
% External fluxes
% IR Heat fluxes for Saturn and Enceladus
q_Sat = F_sat*sigma_SB*T_Sat^4*epsilon_sat;
q_Enc_orbit = F_enc_min * sigma_SB *T_Enc^4 *epsilon_Enc;
q_Enc_ground = 1 * sigma_SB *T_Enc^4 *epsilon_Enc;

theta_3Enc =deg2rad(50);
theta_1Enc =deg2rad(40);
theta_1Sat = 0; % CHANGE!
Q_ext_coldl = zeros(7,1);
Q_ext_coldl(3) = q_Enc_orbit * A3l * epsilon_MLIl*cos(theta_3Enc) ;
Q_ext_coldl(1) = q_Sat * A1l * epsilon_MLIl*cos(theta_1Sat) + q_Enc_orbit * A1l * epsilon_MLIl*cos(theta_1Sat) ;
Cl.C_6rad = 0;
Cl.C_2rad = 3;
Cl.C_5rad= 0; 
Cl.C_8rad = 0;
% clamped but in eclipse
perc_open_rad = 0; % percentage of open radiators
eps_rad = perc_open_rad * eps_louv_open + (1-perc_open_rad) * eps_louv_closed;
% eps_rad = eps_louv_closed;
% radiative coupling
Rl.R_rad0 = sigma_SB*A_rad_totl * eps_rad;
Q_shunt = 0;
Q_diss_coldl(2) = 100 + Q_shunt; % SAFE --> to change
    
%%% SOLVE THE SYSTEM 
Clamped = 1;
T_guesso = 273*ones(15,1);
T_guessl = 273*ones(14,1);
T_guess = [T_guesso;T_guessl ];
options = optimoptions('fsolve','display','iter','MaxFunctionEvaluations',500000,'Maxiterations',50000);
T_cold = fsolve(@(T) HeatBalance_Clamped(T, RO,Rl, CO,Cl, Q_ext_coldo ,Q_ext_coldl , Q_diss_coldo,Q_diss_coldl, Clamped), T_guess, options);
T_coldo = T_cold(1:15);
T_land_cold = T_cold(16:end);

fprintf(['1 orb ',num2str(T_coldo(1)-273),' Celsius\n'])
fprintf(['2 orb ',num2str(T_coldo(2)-273),' Celsius\n'])
fprintf(['3 orb ',num2str(T_coldo(3)-273),' Celsius\n'])
fprintf(['4 orb ',num2str(T_coldo(4)-273),' Celsius\n'])
fprintf(['5 orb ',num2str(T_coldo(5)-273),' Celsius\n'])
fprintf(['6 orb ',num2str(T_coldo(6)-273),' Celsius\n'])
fprintf(['ant orb ',num2str(T_coldo(7)-273),' Celsius\n'])
fprintf(['rad orb ',num2str(T_coldo(8)-273),' Celsius\n'])
fprintf(['15 orb ',num2str(T_coldo(15)-273),' Celsius\n'])

fprintf(['1 land ',num2str(T_land_cold(1)-273),' Celsius\n'])
fprintf(['2 land ',num2str(T_land_cold(2)-273),' Celsius\n'])
fprintf(['3 land ',num2str(T_land_cold(3)-273),' Celsius\n'])
fprintf(['4 land ',num2str(T_land_cold(4)-273),' Celsius\n'])
fprintf(['5 land ',num2str(T_land_cold(5)-273),' Celsius\n'])
fprintf(['6 land ',num2str(T_land_cold(6)-273),' Celsius\n'])
fprintf(['rad land ',num2str(T_land_cold(7)-273),' Celsius\n'])
fprintf(['8 land ',num2str(T_land_cold(8)-273),' Celsius\n'])

%%
% % HeatBalance_Clamped(T_cold, RO,Rl, CO,Cl, Q_ext_coldo ,Q_ext_coldl , Q_diss_coldo,Q_diss_coldl, Clamped)
% T_guess = 273*ones(15,1);
% options = optimoptions('fsolve','display','iter','MaxFunctionEvaluations',50000,'Maxiterations',50000);
% T_orb_cold = fsolve(@(T) HeatBalance_Orbiter(T, RO, CO, Q_ext_coldo , Q_diss_coldo, Clamped), T_guess, options);
% fprintf(['1 ',num2str(T_orb_cold(1)-273),' Celsius\n'])
% fprintf(['2 ',num2str(T_orb_cold(2)-273),' Celsius\n'])
% fprintf(['3 ',num2str(T_orb_cold(3)-273),' Celsius\n'])
% fprintf(['4 ',num2str(T_orb_cold(4)-273),' Celsius\n'])
% fprintf(['5 ',num2str(T_orb_cold(5)-273),' Celsius\n'])
% fprintf(['6 ',num2str(T_orb_cold(6)-273),' Celsius\n'])
% fprintf(['ant ',num2str(T_orb_cold(7)-273),' Celsius\n'])
% fprintf(['rad ',num2str(T_orb_cold(8)-273),' Celsius\n'])
% fprintf(['15 ',num2str(T_orb_cold(15)-273),' Celsius\n'])
%%